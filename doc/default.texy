Nextras\Migrations
##################

- **Supported databases:** PostgreSQL, MySQL
- **Supported DBALs:** "Nextras DBAL":https://github.com/nextras/dbal, "Nette Database":https://github.com/nette/database, "Doctrine DBAL":https://github.com/doctrine/dbal and "dibi":https://github.com/dg/dibi

-------------------------

Using as Symfony Console Commands
=================================

Migrations come with predefined Symfony Console Commands. For integration to "Nette DI":https://github.com/nette/di use "Kdyby/Console":https://github.com/kdyby/console. Just register and configure `MigrationsExtension` in your `config.neon`:

/--neon
extensions:
	migrations: Nextras\Migrations\Bridges\NetteDI\MigrationsExtension

migrations:
	dir: %appDir%/../migrations # migrations base directory
	driver: pgsql               # pgsql or mysql
	dbal: nextras               # nextras, nette, doctrine or dibi
\--

Three basic commands are available:

* Create new migrations with `migrations:create` command.
* Run new migrations with `migrations:continue` command.
* Drop database and run all migrations with `migrations:reset` command.

-------------------------

Dummy data
=================================

If you want the `dummy-data` folder to be executed as well, set the `withDummyData` value to TRUE in the extension's configuration. You typically want to set this in the local config of your development environment.

/--
migrations:
    withDummyData: TRUE
\--

---------------

Low-level Usage
===============

Create new PHP file (e.g. `./migrations/run.php`) with the following content:

/--php
use Nextras\Migrations\Bridges;
use Nextras\Migrations\Controllers;
use Nextras\Migrations\Drivers;
use Nextras\Migrations\Extensions;

require __DIR__ . '/../vendor/autoload.php';


$conn = new Nextras\Dbal\Connection(...);
// or   new Nette\Database\Connection(...);
// or   new Doctrine\Dbal\Connection(...);
// or   new DibiConnection(...);


$dbal = new Bridges\NextrasDbal\NextrasAdapter($conn);
// or   new Bridges\NetteDatabase\NetteAdapter($conn);
// or   new Bridges\DoctrineDbal\DoctrineAdapter($conn);
// or   new Bridges\Dibi\DibiAdapter($conn);

$driver = new Drivers\PgSqlDriver($dbal);
// or     new Drivers\MySqlDriver($dbal);

$controller = new Controllers\HttpController($driver);
// or         new Controllers\ConsoleController($driver);

$baseDir = __DIR__;
$controller->addGroup('structures', "$baseDir/structures");
$controller->addGroup('basic-data', "$baseDir/basic-data", ['structures']);
$controller->addGroup('dummy-data', "$baseDir/dummy-data", ['basic-data']);
$controller->addExtension('sql', new Extensions\SqlHandler($driver));

$controller->run();
\--


Open the script in your browser (`HttpController`) or in a terminal (`ConsoleController`).

[* http-controller.png *]

---------------------

Organizing Migrations
=====================

Migrations are executed in alphabetical order (by filename), e.g. `structures/2015-03-17-aaa.sql` is executed before `dummy-data/2015-03-17-zzz.sql`.
The following structure is recommended and used by Symfony Console Commands by default:

/--
migrations
├── basic-data                           # for both development and production
│   ├── 2015-03-16-170342-languages.sql  # YYYY-MM-DD-HHMMSS-label.extension
│   └── ...
├── dummy-data                           # for development on localhost
│   ├── 2015-03-17-104235-users.sql
│   └── ...
├── structures                           # create, alter tables...
│   ├── 2015-03-17-155419-users.sql
│   └── ...
└── run.php                              # start script if you don't
                                         # use Symfony Console Commands
\--

Optionally you can use **deep directory structure** which is suitable if you have a lot of migrations:

/--
migrations/
├── basic-data/
│   └── 2015/
│       ├── 03/
│       │   ├── 2015-03-16-170342-languages.sql
│       │   └── ...
│       └── 04/
│           └── ...
└── ...
\--

------------------

Extension Handlers
==================

SqlHandler
----------
Most commonly used handler. Executes all SQL queries contained in a file.

/--php
// installation in migrations/run.php
$controller->addExtension('sql', new Extensions\SqlHandler($driver));
\--

PhpHandler
----------
Used for complex migrations which can not be written in SQL.

/--php
// installation in migrations/run.php
$controller->addExtension('php', new Extensions\PhpHandler([
	// list of parameters passed to PHP script, e.g.
	'dibi' => $conn,
]));
\--


Using as Phalcon Framework Task
===============================

Migrations come with predefined Phalcon CLI Task. Task uses these two services:

* **config** (`\Phalcon\Config`) with key `migrationsDir`. See example config.php below.
* **driver** (`\Nextras\Migrations\IDriver`). See example in cli.php below.

Service `driver` needs `\Nextras\Migrations\Bridges\Phalcon\PhalconAdapter` as argument. Therefore you will probably need to declare other services (see cli.php) or create phalcon adapter inside **driver**'s lambda function.

`config/config.php`
/--code php
<?php
declare(strict_types=1);

return [
    'migrationsDir' => __DIR__ . '/../migrations',
    'database' => [
        'host' => getenv('DB_HOST'),
        'username' => getenv('DB_NAME'),
        'password' => getenv('DB_USER'),
        'dbname' => getenv('DB_PASS'),
    ],
];
\--

`app/cli.php`
/--code php
<?php
declare(strict_types=1);


// Using the CLI factory default services container
$di = new \Phalcon\Di\FactoryDefault\Cli();


// Autoloader - register Nextras/Migrations
$loader = new \Phalcon\Loader();
$loader->registerNamespaces(
    [
        'Nextras\Migrations' => __DIR__ . '/../vendor/nextras/migrations/src',
    ]
);
$loader->register();

// DI services
$di->set(
    'config',
    function () {
        $configFile = __DIR__ . '/../config/config.php';
        if (!is_readable($configFile)) {
            die('Config file not readable.');
        }
        $config = include $configFile;
        return new Phalcon\Config($config);
    }
);
$di->set(
    'migrationsDir',
    function () {
        /** @var \Phalcon\Config $config */
        $config = $this->get('config');
        return $config->migrationsDir;
    }
);
$di->set(
    'connection',
    function () {
        /** @var \Phalcon\Config $config */
        $config = $this->get('config');
        return new \Phalcon\Db\Adapter\Pdo\Mysql([
            'host' => $config->database->host,
            'username' => $config->database->username,
            'password' => $config->database->password,
            'dbname' => $config->database->dbname,
            'dialectClass' => new \Phalcon\Db\Dialect\Mysql(),
        ]);
    }
);
$di->set(
    'phalconAdapter',
    function () {
        /** @var \Phalcon\Db\Adapter\Pdo $connection */
        $connection = $this->get('connection');
        return new \Nextras\Migrations\Bridges\Phalcon\PhalconAdapter($connection);
    }
);
$di->set(
    'driver',
    function () {
        /** @var \Nextras\Migrations\Bridges\Phalcon\PhalconAdapter $phalconAdapter */
        $phalconAdapter = $this->get('phalconAdapter');
        return new \Nextras\Migrations\Drivers\MySqlDriver($phalconAdapter);
    }
);

// Create a console application
$console = new \Phalcon\Cli\Console();
$console->setDI($di);

// Process the console arguments
$arguments = [];

foreach ($argv as $k => $arg) {
    if ($k === 1) {
        $arguments['task'] = $arg;
    } elseif ($k === 2) {
        $arguments['action'] = $arg;
    } elseif ($k >= 3) {
        $arguments['params'][] = $arg;
    }
}

try {
    // Handle incoming arguments
    $console->handle($arguments);
} catch (\Phalcon\Exception $e) {
    // Do Phalcon related stuff here
    // ..
    fwrite(STDERR, $e->getMessage() . PHP_EOL);
    exit(1);
} catch (\Throwable $throwable) {
    fwrite(STDERR, $throwable->getMessage() . PHP_EOL);
    exit(1);
}

\--

Usage
-----

`php app/cli.php Nextras\\Migrations\\Bridges\\Phalcon\\Migrations main <action>[:<group>:<label>][:production]`

Examples:
* `php app/cli.php Nextras\\Migrations\\Bridges\\Phalcon\\Migrations main create:dummy-data:users`
* `php app/cli.php Nextras\\Migrations\\Bridges\\Phalcon\\Migrations main cr:d:users`
* `php app/cli.php Nextras\\Migrations\\Bridges\\Phalcon\\Migrations main reset`
* `php app/cli.php Nextras\\Migrations\\Bridges\\Phalcon\\Migrations main co:production`

**Actions:**
* create
  * Can be aliased as "cr".
  * Creates empty sql file named YYYY-MM-DD-HHMMSS-label.sql.
  * E.g. 2015-03-16-170342-users.sql.
  * <label> is mandatory for "create" action.
* continue
  * Can be aliased as "co".
  * Migrates not migrated sql files only.
  * Optional flag "production" (if present all dummy-data files are skipped).
* reset
  * Can be aliased as "re".
  * Drop whole database and then migrates all sql files.
  * Optional flag "production" (if present all dummy-data files are skipped).

**Groups:**
* basic-data
  * Can be aliased as "b".
  * Data for both development and production.
* dummy-data
  * Can be aliased as "d".
  * Data for development on localhost.
* structures
  * Can be aliased as "s".
  * Creates, alter tables, etc.

**Label:**
* For "create" action only. Should be some brief name for sql file contents.

**Production:**
* For "continue" and "reset" actions only.
* If present all dummy-data files are skipped.

-------------------------
